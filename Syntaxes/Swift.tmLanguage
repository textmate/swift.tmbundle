<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>swift</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\bswift</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Swift</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#shebang-line</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#conditional-compilation</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#attribute</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#closure-parameter</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#literal</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#declaration</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keyword</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-global-function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-property</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#section-punctuation</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>arithmetic-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(\+|\-|\*|\/)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.swift</string>
		</dict>
		<key>assignment-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(\+|\-|\*|\/|%|&lt;&lt;|&gt;&gt;|&amp;|\^|\||&amp;&amp;|\|\|)?=(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.assignment.swift</string>
		</dict>
		<key>attribute</key>
		<dict>
			<key>name</key>
			<string>meta.attribute.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>((@)(\b(?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B))(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.attribute.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute-arguments.begin.swift</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.attribute.arguments.swift</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute-arguments.end.swift</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.attribute.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((@)(\b(?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B))</string>
				</dict>
			</array>
		</dict>
		<key>bitwise-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(&amp;|\||\^|&lt;&lt;|&gt;&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.bitwise.swift</string>
		</dict>
		<key>builtin-class-type</key>
		<dict>
			<key>comment</key>
			<string>Builtin class types</string>
			<key>match</key>
			<string>\b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\b</string>
			<key>name</key>
			<string>support.class.swift</string>
		</dict>
		<key>builtin-enum-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Process is an enum, but it acts like a constant</string>
					<key>match</key>
					<string>\b(?:Process|CommandLine)\b</string>
					<key>name</key>
					<string>support.constant.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>The return type of a function that never returns</string>
					<key>match</key>
					<string>\bNever\b</string>
					<key>name</key>
					<string>support.constant.never.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Enum types in the standard library in Swift 3</string>
					<key>match</key>
					<string>\b(?:ImplicitlyUnwrappedOptional|Representation|MemoryLayout|FloatingPointClassification|SetIndexRepresentation|SetIteratorRepresentation|FloatingPointRoundingRule|UnicodeDecodingResult|Optional|DictionaryIndexRepresentation|AncestorRepresentation|DisplayStyle|PlaygroundQuickLook|Never|FloatingPointSign|Bit|DictionaryIteratorRepresentation)\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Enum types in the standard library in Swift 2 only</string>
					<key>match</key>
					<string>\b(?:MirrorDisposition|QuickLookObject)\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
			</array>
		</dict>
		<key>builtin-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\btype(?=\(of:)</string>
					<key>name</key>
					<string>support.function.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Member functions in the standard library in Swift 3 which may be used with trailing closures</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:tarts|ort(?:ed)?|plit)|next|c(?:ontains|reate)|index|partition|e(?:ncode|lementsEqual)|f(?:i(?:lter|rst)|orEach|latMap)|with(?:M(?:utableCharacters|emoryRebound)|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|lexicographicallyPrecedes|reduce|m(?:in|a(?:p|x)))\b</string>
					<key>name</key>
					<string>support.function.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Member functions in the standard library in Swift 3</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:ymmetricDifference|t(?:oreBytes|artsWith|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|negate(?:d)?|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|numerate(?:d)?|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:idth|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographicalCompare))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)\s*(?=\()</string>
					<key>name</key>
					<string>support.function.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Member functions in the standard library in Swift 2 only</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:uperclassMirror|amePositionIn)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))(?=\()</string>
					<key>name</key>
					<string>support.function.swift</string>
				</dict>
			</array>
		</dict>
		<key>builtin-global-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Global functions available in Swift 3 which may be used with trailing closures</string>
					<key>match</key>
					<string>\b(?:anyGenerator)\b</string>
					<key>name</key>
					<string>support.function.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Global functions available in Swift 3</string>
					<key>match</key>
					<string>\b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))\s*(?=\()</string>
					<key>name</key>
					<string>support.function.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Global functions available in Swift 2 only</string>
					<key>match</key>
					<string>\b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))\s*(?=\()</string>
					<key>name</key>
					<string>support.function.swift</string>
				</dict>
			</array>
		</dict>
		<key>builtin-precedencegroup</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Precedence groups in the standard library</string>
					<key>match</key>
					<string>\b(?:BitwiseShift|Assignment|RangeFormation|Casting|Addition|NilCoalescing|Comparison|LogicalConjunction|LogicalDisjunction|Default|Ternary|Multiplication|FunctionArrow)Precedence\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
			</array>
		</dict>
		<key>builtin-property</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;=\bProcess\.|\bCommandLine\.)(arguments|argc|unsafeArgv)</string>
					<key>name</key>
					<string>support.variable.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Properties in the standard library in Swift 3</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:s(?:t(?:artIndex|ri(?:ngValue|de))|i(?:ze|gn(?:BitIndex|ificand(?:Bit(?:Count|Pattern)|Width)?|alingNaN)?)|u(?:perclassMirror|mmary|bscriptBaseAddress))|h(?:eader|as(?:hValue|PointerRepresentation))|n(?:ulTerminatedUTF8|ext(?:Down|Up)|a(?:n|tiveOwner))|c(?:haracters|ount(?:TrailingZeros)?|ustom(?:Mirror|PlaygroundQuickLook)|apacity)|i(?:s(?:S(?:ign(?:Minus|aling(?:NaN)?)|ubnormal)|N(?:ormal|aN)|Canonical|Infinite|Zero|Empty|Finite|ASCII)|n(?:dices|finity)|dentity)|owner|de(?:scription|bugDescription)|u(?:n(?:safelyUnwrapped|icodeScalar(?:s)?|derestimatedCount)|tf(?:16|8(?:Start|C(?:String|odeUnitCount))?)|intValue|ppercaseString|lp(?:OfOne)?)|p(?:i|ointee)|e(?:ndIndex|lements|xponent(?:Bit(?:Count|Pattern))?)|value(?:s)?|keys|quietNaN|f(?:irst(?:ElementAddress(?:IfContiguous)?)?|loatingPointClass)|l(?:ittleEndian|owercaseString|eastNo(?:nzeroMagnitude|rmalMagnitude)|a(?:st|zy))|a(?:l(?:ignment|l(?:ocatedElementCount|Zeros))|rray(?:PropertyIsNativeTypeChecked)?)|ra(?:dix|wValue)|greatestFiniteMagnitude|m(?:in|emory|ax)|b(?:yteS(?:ize|wapped)|i(?:nade|tPattern|gEndian)|uffer|ase(?:Address)?))\b</string>
					<key>name</key>
					<string>support.variable.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Properties in the standard library in Swift 2 only</string>
					<key>match</key>
					<string>(?&lt;=\.)(?:boolValue|disposition|end|objectIdentifier|quickLookObject|start|valueType)\b</string>
					<key>name</key>
					<string>support.variable.swift</string>
				</dict>
			</array>
		</dict>
		<key>builtin-protocol-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Protocols in the standard library in Swift 3</string>
					<key>match</key>
					<string>\b(?:Ra(?:n(?:domAccess(?:Collection|Indexable)|geReplaceable(?:Collection|Indexable))|wRepresentable)|M(?:irrorPath|utable(?:Collection|Indexable))|Bi(?:naryFloatingPoint|twiseOperations|directional(?:Collection|Indexable))|S(?:tr(?:ideable|eamable)|igned(?:Number|Integer)|e(?:tAlgebra|quence))|Hashable|C(?:o(?:llection|mparable)|ustom(?:Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArg)|TextOutputStream|I(?:n(?:teger(?:Arithmetic)?|dexable(?:Base)?)|teratorProtocol)|OptionSet|Un(?:signedInteger|icodeCodec)|E(?:quatable|rror|xpressibleBy(?:BooleanLiteral|String(?:Interpolation|Literal)|NilLiteral|IntegerLiteral|DictionaryLiteral|UnicodeScalarLiteral|ExtendedGraphemeClusterLiteral|FloatLiteral|ArrayLiteral))|FloatingPoint|L(?:osslessStringConvertible|azy(?:SequenceProtocol|CollectionProtocol))|A(?:nyObject|bsoluteValuable))\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Protocols in the standard library in Swift 2 only</string>
					<key>match</key>
					<string>\b(?:Ran(?:domAccessIndexType|geReplaceableCollectionType)|GeneratorType|M(?:irror(?:Type|PathType)|utable(?:Sliceable|CollectionType))|B(?:i(?:twiseOperationsType|directionalIndexType)|oolean(?:Type|LiteralConvertible))|S(?:tring(?:InterpolationConvertible|LiteralConvertible)|i(?:nkType|gned(?:NumberType|IntegerType))|e(?:tAlgebraType|quenceType)|liceable)|NilLiteralConvertible|C(?:ollectionType|VarArgType)|Inte(?:rvalType|ger(?:Type|LiteralConvertible|ArithmeticType))|O(?:utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(?:signedIntegerType|icode(?:ScalarLiteralConvertible|CodecType))|E(?:rrorType|xten(?:sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(?:orwardIndexType|loat(?:ingPointType|LiteralConvertible))|A(?:nyCollectionType|rrayLiteralConvertible))\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
			</array>
		</dict>
		<key>builtin-struct-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Structs in the standard library in Swift 3</string>
					<key>match</key>
					<string>\b(?:R(?:e(?:peat(?:ed)?|versed(?:RandomAccess(?:Collection|Index)|Collection|Index))|an(?:domAccessSlice|ge(?:Replaceable(?:RandomAccessSlice|BidirectionalSlice|Slice)|Generator)?))|Generator(?:Sequence|OfOne)|M(?:irror|utable(?:Ran(?:domAccessSlice|geReplaceable(?:RandomAccessSlice|BidirectionalSlice|Slice))|BidirectionalSlice|Slice)|anagedBufferPointer)|B(?:idirectionalSlice|ool)|S(?:t(?:aticString|ri(?:ng|deT(?:hrough(?:Generator|Iterator)?|o(?:Generator|Iterator)?)))|et(?:I(?:ndex|terator))?|lice)|HalfOpenInterval|C(?:haracter(?:View)?|o(?:ntiguousArray|untable(?:Range|ClosedRange)|llectionOfOne)|OpaquePointer|losed(?:Range(?:I(?:ndex|terator))?|Interval)|VaListPointer)|I(?:n(?:t(?:16|8|32|64)?|d(?:ices|ex(?:ing(?:Generator|Iterator))?))|terator(?:Sequence|OverOne)?)|Zip2(?:Sequence|Iterator)|O(?:paquePointer|bjectIdentifier)|D(?:ictionary(?:I(?:ndex|terator)|Literal)?|ouble|efault(?:RandomAccessIndices|BidirectionalIndices|Indices))|U(?:n(?:safe(?:RawPointer|Mutable(?:RawPointer|BufferPointer|Pointer)|BufferPointer(?:Generator|Iterator)?|Pointer)|icodeScalar(?:View)?|foldSequence|managed)|TF(?:16(?:View)?|8(?:View)?|32)|Int(?:16|8|32|64)?)|Join(?:Generator|ed(?:Sequence|Iterator))|PermutationGenerator|E(?:numerate(?:Generator|Sequence|d(?:Sequence|Iterator))|mpty(?:Generator|Collection|Iterator))|Fl(?:oat(?:80)?|atten(?:Generator|BidirectionalCollection(?:Index)?|Sequence|Collection(?:Index)?|Iterator))|L(?:egacyChildren|azy(?:RandomAccessCollection|Map(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Collection|Iterator)|BidirectionalCollection|Sequence|Collection|Filter(?:Generator|BidirectionalCollection|Sequence|Collection|I(?:ndex|terator))))|A(?:ny(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Hashable|Collection|I(?:ndex|terator))|utoreleasingUnsafeMutablePointer|rray(?:Slice)?))\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Structs in the standard library in Swift 2 only</string>
					<key>match</key>
					<string>\b(?:R(?:everse(?:RandomAccess(?:Collection|Index)|Collection|Index)|awByte)|Map(?:Generator|Sequence|Collection)|S(?:inkOf|etGenerator)|Zip2Generator|DictionaryGenerator|Filter(?:Generator|Sequence|Collection(?:Index)?)|LazyForwardCollection|Any(?:RandomAccessIndex|BidirectionalIndex|Forward(?:Collection|Index)))\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
			</array>
		</dict>
		<key>builtin-type</key>
		<dict>
			<key>comment</key>
			<string>Types provided in the standard library</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-class-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-enum-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-protocol-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-struct-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-typealias</string>
				</dict>
			</array>
		</dict>
		<key>builtin-typealias</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Typealiases in the standard library in Swift 3</string>
					<key>match</key>
					<string>\b(?:Raw(?:Significand|Exponent|Value)|B(?:ooleanLiteralType|uffer|ase)|S(?:t(?:orage|r(?:i(?:ngLiteralType|de)|eam(?:1|2)))|ubSequence)|NativeBuffer|C(?:hild(?:ren)?|Bool|S(?:hort|ignedChar)|odeUnit|Char(?:16|32)?|Int|Double|Unsigned(?:Short|Char|Int|Long(?:Long)?)|Float|WideChar|Long(?:Long)?)|I(?:n(?:t(?:Max|egerLiteralType)|d(?:ices|ex(?:Distance)?))|terator)|Distance|U(?:n(?:icodeScalar(?:Type|Index|View|LiteralType)|foldFirstSequence)|TF(?:16(?:Index|View)|8Index)|IntMax)|E(?:lement(?:s)?|x(?:tendedGraphemeCluster(?:Type|LiteralType)|ponent))|V(?:oid|alue)|Key|Float(?:32|LiteralType|64)|AnyClass)\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Typealiases in the standard library in Swift 2 only</string>
					<key>match</key>
					<string>\b(?:Generator|PlaygroundQuickLook|UWord|Word)\b</string>
					<key>name</key>
					<string>support.type.swift</string>
				</dict>
			</array>
		</dict>
		<key>closure-parameter</key>
		<dict>
			<key>match</key>
			<string>\$[0-9]+</string>
			<key>name</key>
			<string>variable.other.closure-parameter.swift</string>
		</dict>
		<key>coalescing-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![?/=\-+!*%&lt;&gt;&amp;|\^~.])\?\?(?![?/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.coalescing.swift</string>
		</dict>
		<key>code-block</key>
		<dict>
			<key>begin</key>
			<string>(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.code-block.begin.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>code-block</string>
			<key>end</key>
			<string>(\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.code-block.end.swift</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>comment</key>
			<string>All comment types</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block-doc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inline-doc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inline</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>block</key>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
					</array>
					<key>repository</key>
					<dict>
						<key>nested</key>
						<dict>
							<key>begin</key>
							<string>/\*</string>
							<key>end</key>
							<string>\*/</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#nested</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<key>block-doc</key>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!\/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.documentation.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.documentation.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
						<dict>
							<key>include</key>
							<string>text.restructuredtext#tags</string>
						</dict>
					</array>
					<key>repository</key>
					<dict>
						<key>nested</key>
						<dict>
							<key>begin</key>
							<string>/\*</string>
							<key>end</key>
							<string>\*/</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#nested</string>
								</dict>
								<dict>
									<key>include</key>
									<string>text.restructuredtext#tags</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<key>inline</key>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.double-slash.swift</string>
						</dict>
					</array>
				</dict>
				<key>inline-doc</key>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=///)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>///</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.triple-slash.swift</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>comparison-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])((=|!)==?|(&lt;|&gt;)=?|~=)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.comparison.swift</string>
		</dict>
		<key>conditional-compilation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#if|#elseif)\s+(false)\b.*$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.language.boolean.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^\s*(#endif)\b</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string></string>
							<key>end</key>
							<string>(?=^\s*#endif\b)</string>
							<key>name</key>
							<string>comment.block.preprocessor.swift</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(?:#if|#elseif)\s+</string>
					<key>end</key>
					<string>(?=\s*(?://|/\*))|$</string>
					<key>name</key>
					<string>meta.preprocessor.conditional.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#logical-operator</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literal-boolean</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.import.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.constant.platform.architecture.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(arch)\s*\(\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\w+)\s*\)</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.import.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>support.constant.platform.os.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(os)\s*\(\s*(?:(macOS|OSX|iOS|tvOS|watchOS|Android|Linux|FreeBSD|Windows|PS4)|\w+)\s*\)</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(swift)\s*\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.import.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\)|$</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>&gt;=</string>
									<key>name</key>
									<string>keyword.operator.comparison.swift</string>
								</dict>
								<dict>
									<key>match</key>
									<string>\b[0-9]+(?:\.[0-9]+)*\b</string>
									<key>name</key>
									<string>constant.numeric.swift</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*#endif\s+</string>
					<key>end</key>
					<string>(?=\s*(?://|/\*))|$</string>
					<key>name</key>
					<string>meta.preprocessor.swift</string>
				</dict>
			</array>
		</dict>
		<key>custom-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\s(\[{,;:])([/=\-+!*%&lt;&gt;&amp;|\^~.]++)(?![\s)\]},;:])</string>
					<key>name</key>
					<string>keyword.operator.custom.prefix.unary.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\s(\[{,;:])([/=\-+!*%&lt;&gt;&amp;|\^~.]++)(?![\s)\]},;:\.])</string>
					<key>name</key>
					<string>keyword.operator.custom.postfix.unary.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\s(\[{,;:])([/=\-+!*%&lt;&gt;&amp;|\^~.]++)(?=[\s)\]},;:])</string>
					<key>name</key>
					<string>keyword.operator.custom.binary.swift</string>
				</dict>
			</array>
		</dict>
		<key>declaration</key>
		<dict>
			<key>name</key>
			<string>meta.definition.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declaration-import</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-function-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-protocol</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-typealias</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-precedencegroup</string>
				</dict>
			</array>
		</dict>
		<key>declaration-function</key>
		<dict>
			<key>begin</key>
			<string>\b(func)\s+(\b(?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B|[/=\-+!*%&lt;&gt;&amp;|\^~.]+)\s*(?=\(|&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})|$(?# functions in protocol declarations or generated interfaces have no body)</string>
			<key>name</key>
			<string>meta.definition.function.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-parameter-list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-result</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:throws|rethrows)\b</string>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Swift 3: generic constraints after the parameters and return type</string>
					<key>include</key>
					<string>#generic-constraints</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.definition.function.body.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-braces</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>declaration-function-initializer</key>
		<dict>
			<key>begin</key>
			<string>\b(init[?!]?)\s*(?=\(|&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})|$</string>
			<key>name</key>
			<string>meta.definition.function.initializer.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-parameter-list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-clause</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:throws|rethrows)\b</string>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Swift 3: generic constraints after the parameters and return type</string>
					<key>include</key>
					<string>#generic-constraints</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.definition.function.initializer.body.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-braces</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>declaration-import</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.type.module.import.swift</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(import)\s+(?:(typealias|struct|class|enum|protocol|var|func)\s+)?((?:\B\$[0-9]+|\b(?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B|[/=\-+!*%&lt;&gt;&amp;|\^~.]+)(?:\.(?:\B\$[0-9]+|\b(?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B|[/=\-+!*%&lt;&gt;&amp;|\^~.]+))*)</string>
			<key>name</key>
			<string>meta.import.swift</string>
		</dict>
		<key>declaration-operator</key>
		<dict>
			<key>begin</key>
			<string>\b(prefix|infix|postfix)?\s+(operator)\s+([/=\-+!*%&lt;&gt;&amp;|\^~.]+)\s*(?=[:{])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.operator.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.custom.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>name</key>
			<string>meta.definition.operator.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#declaration-operator-swift2</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-operator-swift3</string>
				</dict>
			</array>
		</dict>
		<key>declaration-operator-swift2</key>
		<dict>
			<key>begin</key>
			<string>(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.operator.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.operator.end.swift</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.operator.associativity.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(associativity)\s+(left|right)\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.integer.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(precedence)\s+([0-9]+)\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(assignment)\b</string>
				</dict>
			</array>
		</dict>
		<key>declaration-operator-swift3</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#builtin-precedencegroup</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>match</key>
			<string>(:)\s*((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)</string>
		</dict>
		<key>declaration-precedencegroup</key>
		<dict>
			<key>begin</key>
			<string>\b(precedencegroup)\s+((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)\s*(?=\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.precedencegroup.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.precedencegroup.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>name</key>
			<string>meta.definition.precedencegroup.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.precedencegroup.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.precedencegroup.end.swift</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.modifier.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.other.inherited-class.swift</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#builtin-precedencegroup</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(higherThan|lowerThan)\s*:\s*((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.modifier.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other.operator.associativity.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(associativity)\b(?:\s*:\s*(right|left)\b)?</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.modifier.swift</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.language.boolean.swift</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(assignment)\b(?:\s*:\s*(true|false)\b)?</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>declaration-protocol</key>
		<dict>
			<key>begin</key>
			<string>\b(protocol)\s+((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.$1.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.$1.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>name</key>
			<string>meta.definition.type.protocol.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inheritance-clause</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.definition.type.protocol.body.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-braces</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>declaration-type</key>
		<dict>
			<key>begin</key>
			<string>\b(class(?!\s+(?:func|var|let)\b)|struct|enum)\s+((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.$1.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.$1.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>name</key>
			<string>meta.definition.type.$1.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-parameter-list</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Swift 3: generic constraints after the generic param list</string>
					<key>include</key>
					<string>#generic-constraints</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inheritance-clause</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.type.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.definition.type.body.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-braces</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>declaration-typealias</key>
		<dict>
			<key>begin</key>
			<string>\b(typealias)\s+((?!\d)\w[\w\d]*\b|\B`(?!\d)\w[\w\d]*`\B)\s*(?=[&lt;=])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.declaration-specifier.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.typealias.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>name</key>
			<string>meta.definition.typealias.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#generic-parameter-list</string>
				</dict>
			</array>
		</dict>
		<key>function-result</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.function.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)(?=\{|\bwhere\b)|$</string>
			<key>name</key>
			<string>meta.function-result.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>generic-constraints</key>
		<dict>
			<key>begin</key>
			<string>\b(where)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.generic-constraint-introducer.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\s*\{|&gt;)</string>
			<key>name</key>
			<string>meta.generic-constraints.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.generic-constraint.same-type.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.generic-constraint.conforms-to.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(?:(==)|(:))(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
				</dict>
			</array>
		</dict>
		<key>generic-parameter-list</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.generic-parameter-list.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)|(?=[^\w\d&lt;&gt;\s,=&amp;`])(?# characters besides these are never valid in a generic param list -- even if it's not really a valid clause, we should stop trying to parse it if we see one of them.)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.generic-parameter-list.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.generic-parameter-list.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Swift 2: constraints inside the generic param list</string>
					<key>include</key>
					<string>#generic-constraints</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.language.generic-parameter.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b((?!\d)\w[\w\d]*)\b</string>
				</dict>
			</array>
		</dict>
		<key>increment-decrement-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(\+\+|\-\-)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.increment-or-decrement.swift</string>
		</dict>
		<key>inheritance-clause</key>
		<dict>
			<key>begin</key>
			<string>:\s*</string>
			<key>end</key>
			<string>(?=\bwhere\b|\{)</string>
			<key>name</key>
			<string>meta.inheritance-clause.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(?!\d)\w[\w\d]*\b</string>
					<key>end</key>
					<string>(?=\s*[^\s(&lt;])(?# this pattern may only end if what follows doesn't look like it could be a valid type)</string>
					<key>name</key>
					<string>entity.other.inherited-class.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested-angles</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>nested-angles</key>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>end</key>
					<string>&gt;|(?=[^\w\d&lt;&gt;()\s,=&amp;`](?# damage control - characters other than these should never be allowed in an inheritance clause ))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-angles</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-parens</string>
						</dict>
					</array>
				</dict>
				<key>nested-parens</key>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)|(?=[^\w\d&lt;&gt;()\s,=&amp;`](?# damage control - characters other than these should never be allowed in an inheritance clause ))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-parens</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#nested-angles</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:if|else|guard|where|switch|case|default|fallthrough)\b</string>
					<key>name</key>
					<string>keyword.control.branch.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:continue|break|fallthrough|return)\b</string>
					<key>name</key>
					<string>keyword.control.transfer.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:while|repeat|for|in)\b</string>
					<key>name</key>
					<string>keyword.control.loop.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bdefer\b</string>
					<key>name</key>
					<string>keyword.control.defer.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:do|catch|throws?|rethrows|try)\b|\btry[?!]\B</string>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:associatedtype|let|operator|typealias|var)\b</string>
					<key>name</key>
					<string>keyword.other.declaration-specifier.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(class|enum|extension|precedencegroup|protocol|struct)\b</string>
					<key>name</key>
					<string>storage.type.$1.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix)\b</string>
					<key>name</key>
					<string>storage.modifier.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\binit[?!]|\b(?:func|init|deinit|subscript|didSet|get|set|willSet)\b</string>
					<key>name</key>
					<string>storage.type.function.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:fileprivate|internal|private|public)\b</string>
					<key>name</key>
					<string>keyword.other.declaration-specifier.accessibility.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>matches weak, unowned, unowned(safe), unowned(unsafe)</string>
					<key>match</key>
					<string>\b(?:weak\b|unowned(?:\((?:un)?safe\))?)</string>
					<key>name</key>
					<string>keyword.other.capture-specifier.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:super|self)\b</string>
					<key>name</key>
					<string>variable.language.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\B(?:#file|#line|#column|#function|#dsohandle)\b|\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\b</string>
					<key>name</key>
					<string>support.variable.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:dynamicType|Protocol|Type)\b</string>
					<key>name</key>
					<string>keyword.operator.other.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bimport\b</string>
					<key>name</key>
					<string>keyword.control.import.swift</string>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-boolean</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnil\b</string>
					<key>name</key>
					<string>constant.language.nil.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>object "literals" used in playgrounds</string>
					<key>match</key>
					<string>\B(?:#colorLiteral|#imageLiteral|#fileLiteral)\b</string>
					<key>name</key>
					<string>support.function.object-literal.swift</string>
				</dict>
			</array>
		</dict>
		<key>literal-boolean</key>
		<dict>
			<key>match</key>
			<string>\b(true|false)\b</string>
			<key>name</key>
			<string>constant.language.boolean.swift</string>
		</dict>
		<key>literal-numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>0.1, -4_2.5, 6.022e23, 10E-5</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)[0-9][0-9_]*(?:\.[0-9][0-9_]*)?(?:[eE][+\-]?[0-9][0-9_]*)?\b(?!\.[0-9])</string>
					<key>name</key>
					<string>constant.numeric.float.decimal.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>-0x1.ap2_3, 0x31p-4</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)(0x\h[\h_]*)(?:\.\h[\h_]*)?[pP][+\-]?[0-9][0-9_]*\b(?!\.[0-9])</string>
					<key>name</key>
					<string>constant.numeric.float.hexadecimal.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>0x1p, 0x1p_2, 0x1.5pa, 0x1.1p+1f, 0x1pz</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)(0x\h[\h_]*)(?:\.\h[\h_]*)?(?:[pP][+\-]?\w*)\b(?!\.[0-9])</string>
					<key>name</key>
					<string>invalid.illegal.numeric.float.invalid-exponent.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>0x1.5w (note that 0x1.f may be a valid expression)</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)(0x\h[\h_]*)\.[0-9][\w.]*</string>
					<key>name</key>
					<string>invalid.illegal.numeric.float.missing-exponent.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>-.5, .2f (note that 1.-.5 may be a valid expression)</string>
					<key>match</key>
					<string>(?&lt;=\s|^)\-?\.[0-9][\w.]*</string>
					<key>name</key>
					<string>invalid.illegal.numeric.float.missing-leading-zero.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>0b_0_1, 0x_1p+3q</string>
					<key>match</key>
					<string>(\B\-|\b)0[box]_[\h_]*(?:[pPeE][+-]?\w+)?[\w.]+</string>
					<key>name</key>
					<string>invalid.illegal.numeric.leading-underscore.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>tuple positional member: not really a numeric literal, but not invalid</string>
					<key>match</key>
					<string>(?&lt;=[^.]\.)[0-9][0-9_]*\b</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>0b010, 0b1_0</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)0b[01][01_]*\b(?!\.[0-9])</string>
					<key>name</key>
					<string>constant.numeric.integer.binary.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>0o1, 0o7_3</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)0o[0-7][0-7_]*\b(?!\.[0-9])</string>
					<key>name</key>
					<string>constant.numeric.integer.octal.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>02, 3_456</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)[0-9][0-9_]*\b(?!\.[0-9])</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>0x4, 0xF_7</string>
					<key>match</key>
					<string>(\B\-|\b)(?&lt;![^.]\.)0x\h[\h_]*\b(?!\.[0-9])</string>
					<key>name</key>
					<string>constant.numeric.integer.hexadecimal.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\B\-|\b)[0-9][\w.]*</string>
					<key>name</key>
					<string>invalid.illegal.numeric.other.swift</string>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.escape.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\\)[0\\tnr"']</string>
					<key>name</key>
					<string>constant.character.escape.swift</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.escape.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\\)u\{\h{1,8}\}</string>
					<key>name</key>
					<string>constant.character.escape.swift</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\\\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.begin.swift</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>source.swift</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>source.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.line.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>comment</key>
							<string>Nested parens</string>
							<key>end</key>
							<string>\)</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.escape.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\\).</string>
					<key>name</key>
					<string>invalid.illegal.unrecognized-escape.swift</string>
				</dict>
			</array>
		</dict>
		<key>logical-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(!|&amp;&amp;|\|\|)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.logical.swift</string>
		</dict>
		<key>nested-braces</key>
		<dict>
			<key>begin</key>
			<string>(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.swift</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nested-braces</string>
				</dict>
			</array>
		</dict>
		<key>operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comparison-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#assignment-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#logical-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#remainder-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#increment-decrement-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#overflow-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#range-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bitwise-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arithmetic-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ternary-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-casting-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#coalescing-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#custom-operator</string>
				</dict>
			</array>
		</dict>
		<key>overflow-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])\&amp;(\+|\-|\*|\/|%)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.overflow.swift</string>
		</dict>
		<key>parameter-clause</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function-arguments.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function-arguments.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameter-clause.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>External parameter labels are considered part of the function name</string>
					<key>match</key>
					<string>\b((?!\d)\w[\w\d]*)\b\s+\b((?!\d)\w[\w\d]*)\b(?=\s*:)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>If no external label is given, the name is both the external label and the internal variable name</string>
					<key>match</key>
					<string>\b(((?!\d)\w[\w\d]*))\b(?=\s*:)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>range-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])\.\.[.&lt;]?(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.range.swift</string>
		</dict>
		<key>remainder-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])\%(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.remainder.swift</string>
		</dict>
		<key>section-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Allows the special return snippet to fire.</string>
					<key>match</key>
					<string>(\{)(\})</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Allows the special return snippet to fire.</string>
					<key>match</key>
					<string>(\()(\))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Allows the special return snippet to fire.</string>
					<key>match</key>
					<string>(\[)(\])</string>
				</dict>
			</array>
		</dict>
		<key>shebang-line</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.line.shebang.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Shebang line</string>
			<key>match</key>
			<string>^(#!).*$</string>
			<key>name</key>
			<string>comment.line.shebang.swift</string>
		</dict>
		<key>ternary-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;=[\s(\[{,;:])(\?|:)(?=[\s)\]},;:])</string>
			<key>name</key>
			<string>keyword.operator.ternary.swift</string>
		</dict>
		<key>type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#attribute</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:throws|rethrows)\b</string>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\binout\b</string>
					<key>name</key>
					<string>storage.modifier.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bSelf\b</string>
					<key>name</key>
					<string>variable.language.swift</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.function.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.type.composition.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Swift 3: A &amp; B</string>
					<key>match</key>
					<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(&amp;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bAny\b</string>
					<key>name</key>
					<string>keyword.operator.type.any.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Swift 2: protocol&lt;A, B&gt;</string>
					<key>match</key>
					<string>\bprotocol\b</string>
					<key>name</key>
					<string>keyword.operator.type.composition.swift</string>
				</dict>
			</array>
		</dict>
		<key>type-casting-operator</key>
		<dict>
			<key>match</key>
			<string>\b(is\b|as([!?]\B|\b))</string>
			<key>name</key>
			<string>keyword.operator.type-casting.swift</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.swift</string>
	<key>uuid</key>
	<string>D133338A-DEED-4ECC-9852-A392C44D10AC</string>
</dict>
</plist>
